{"version":3,"file":"index.es.js","sources":["../src/core/share.ts","../src/core/slave.ts","../src/core/master.ts"],"sourcesContent":["/*\n * @Author: zhangyang\n * @Date: 2022-07-02 15:08:54\n * @LastEditTime: 2022-07-02 19:59:17\n * @Description: \n */\nexport const SHAKE_HANDS_MSG = '---young-rpc-shake-hands-message-request---';","/*\n * @Author: zhangyang\n * @Date: 2022-07-02 14:57:53\n * @LastEditTime: 2022-07-31 15:11:23\n * @Description: \n */\nimport { GetParamsSign, Young } from '../../typings';\nimport { SHAKE_HANDS_MSG } from './share';\n\ntype SlaveHandlers<R extends Record<string, any>> = {\n  [P in keyof R]?: (args: Young.MasterReturnParams) => Promise<void>;\n};\n\nexport class YoungRPCSlave<R extends Record<string, any>> {\n  public port: MessagePort;\n  private masterWindow: Window;\n  private handlersMap: SlaveHandlers<R> = {};\n\n  constructor(private shakeHandsMsg = SHAKE_HANDS_MSG) {\n    if (window.opener && window.opener !== window) {\n      // Áî±Áà∂Á™óÂè£ÈÄöËøá window.open ÊâìÂºÄÁöÑ\n      this.masterWindow = window.opener;\n    } else if (window.parent && window.parent !== window) {\n      // iframe ÂµåÂ•ó\n      this.masterWindow = window.parent;\n    }\n    // ‰∏éÁà∂È°µÈù¢Êè°ÊâãÔºåÂª∫Á´ã‰ø°ÈÅì\n    this.shakeHands();\n  }\n\n  public shakeHands() {\n    if (!this.masterWindow) {\n      throw new Error('YoungRPCSlave can only be used in sub window');\n    }\n    const channel = new MessageChannel();\n    this.port = channel.port1;\n    this.port.onmessage = (e) => {\n      const { data, isTrusted } = e;\n      if (isTrusted && data) {\n        if (data.cmd && typeof data.cmd === 'string' && this.handlersMap[data.cmd as keyof R]) {\n          // Â∑≤Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\n          this.handlersMap[data.cmd](data as Young.MasterReturnParams);\n        }  else {\n          // Êú™Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\n          console.warn('üöÄunknown msg', data);\n        }\n      }\n    };\n    this.port.onmessageerror = (e) => {\n      console.error('üöÄ ~ YoungRPCSlave ~ e', e);\n    };\n    \n    this.masterWindow.postMessage(this.shakeHandsMsg, '*', [channel.port2]);\n  }\n\n  public trigger<T extends keyof R>(cmd: T, params = {} as GetParamsSign<R[T]>) {\n    this.port.postMessage({ cmd, params });\n  }\n\n  public setHandler<T extends keyof R>(cmd: T, { success, fail } = {} as Young.Cbk) {\n    this.handlersMap[cmd] = async ({ ok, data }) => {\n      if (ok) {\n        await success?.(data);\n      } else {\n        await fail?.(data);\n      }\n    };\n    return this.trigger.bind(this, cmd) as (params: GetParamsSign<R[T]>) => ReturnType<R[T]>;\n  }\n};","/*\n * @Author: zhangyang\n * @Date: 2022-07-02 14:57:48\n * @LastEditTime: 2022-07-31 15:11:45\n * @Description: \n */\nimport { GetParamsSign, Young } from '../../typings';\nimport { SHAKE_HANDS_MSG } from './share';\n\ntype MasterCbk<R extends Record<string, any>, T extends keyof R> = (params: GetParamsSign<R[T]>) => any | Promise<any>;\ntype MasterHandlers<R extends Record<string, any>> = {\n  [P in keyof R]?: MasterCbk<R, P>;\n};\n\nexport class YoungRPCMaster<R extends Record<string, any>> {\n  private port: MessagePort;\n  private handlersMap: MasterHandlers<R> = {};\n  constructor(shakeHandsMsg = SHAKE_HANDS_MSG) {\n    window.addEventListener('message', async (e) => {\n      if (e.data === shakeHandsMsg) {\n        this.port = e.ports[0];\n        this.port.onmessage = (e) => {\n          const { data, isTrusted } = e;\n          if (isTrusted && data) {\n            // ÂèØ‰ª•Ê≠£ÂºèÂ§ÑÁêÜÊ∂àÊÅØ‰∫Ü\n            if (data.cmd && typeof data.cmd === 'string' && this.handlersMap[data.cmd as keyof R]) {\n              // Â∑≤Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\n              this.handlersMap[data.cmd](data.params);\n            }  else {\n              // Êú™Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\n              console.warn('üöÄunknown msg', data);\n            }\n          }\n        };\n        this.port.onmessageerror = (e) => {\n          console.error('üöÄ ~ YoungRPCMaster ~ ', e);\n        };\n        console.log('üöÄüöÄüöÄ master app is ready üöÄüöÄüöÄ, shakeHandsMsg: ', shakeHandsMsg);\n      }\n    });\n  }\n\n  public setHandler<T extends keyof R>(cmd: T, cbk: MasterHandlers<R>[T]) {\n    this.handlersMap[cmd] = cbk;\n  }\n\n  public close() {\n    // ÂÖ≥Èó≠‰ø°ÈÅì\n    this.port.close();\n  }\n\n  public sendMsg(data: Young.MasterReturnParams & { cmd: keyof R }) {\n    this.port.postMessage(data);\n  }\n};"],"names":["SHAKE_HANDS_MSG","YoungRPCSlave","shakeHandsMsg","channel","e","data","isTrusted","cmd","params","success","fail","ok","YoungRPCMaster","cbk"],"mappings":"AAMO,MAAMA,IAAkB;ACOxB,MAAMC,EAA6C;AAAA,EAKxD,YAAoBC,IAAgBF,GAAiB;AAAjC,SAAA,gBAAAE,GAFpB,KAAQ,cAAgC,IAGlC,OAAO,UAAU,OAAO,WAAW,SAErC,KAAK,eAAe,OAAO,SAClB,OAAO,UAAU,OAAO,WAAW,WAE5C,KAAK,eAAe,OAAO,SAG7B,KAAK,WAAW;AAAA,EAClB;AAAA,EAEO,aAAa;AACd,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8CAA8C;AAE1D,UAAAC,IAAU,IAAI;AACpB,SAAK,OAAOA,EAAQ,OACf,KAAA,KAAK,YAAY,CAACC,MAAM;AACrB,YAAA,EAAE,MAAAC,GAAM,WAAAC,EAAc,IAAAF;AAC5B,MAAIE,KAAaD,MACXA,EAAK,OAAO,OAAOA,EAAK,OAAQ,YAAY,KAAK,YAAYA,EAAK,GAAc,IAElF,KAAK,YAAYA,EAAK,GAAG,EAAEA,CAAgC,IAGnD,QAAA,KAAK,iBAAiBA,CAAI;AAAA,IAEtC,GAEG,KAAA,KAAK,iBAAiB,CAACD,MAAM;AACxB,cAAA,MAAM,0BAA0BA,CAAC;AAAA,IAAA,GAGtC,KAAA,aAAa,YAAY,KAAK,eAAe,KAAK,CAACD,EAAQ,KAAK,CAAC;AAAA,EACxE;AAAA,EAEO,QAA2BI,GAAQC,IAAS,IAA2B;AAC5E,SAAK,KAAK,YAAY,EAAE,KAAAD,GAAK,QAAAC,EAAQ,CAAA;AAAA,EACvC;AAAA,EAEO,WAA8BD,GAAQ,EAAE,SAAAE,GAAS,MAAAC,EAAK,IAAI,CAAA,GAAiB;AAChF,gBAAK,YAAYH,CAAG,IAAI,OAAO,EAAE,IAAAI,GAAI,MAAAN,QAAW;AAC9C,MAAIM,IACF,OAAMF,KAAA,gBAAAA,EAAUJ,MAEhB,OAAMK,KAAA,gBAAAA,EAAOL;AAAA,IACf,GAEK,KAAK,QAAQ,KAAK,MAAME,CAAG;AAAA,EACpC;AACF;ACvDO,MAAMK,EAA8C;AAAA,EAGzD,YAAYV,IAAgBF,GAAiB;AAD7C,SAAQ,cAAiC,IAEhC,OAAA,iBAAiB,WAAW,OAAOI,MAAM;AAC1C,MAAAA,EAAE,SAASF,MACR,KAAA,OAAOE,EAAE,MAAM,CAAC,GAChB,KAAA,KAAK,YAAY,CAACA,MAAM;AACrB,cAAA,EAAE,MAAAC,GAAM,WAAAC,EAAcF,IAAAA;AAC5B,QAAIE,KAAaD,MAEXA,EAAK,OAAO,OAAOA,EAAK,OAAQ,YAAY,KAAK,YAAYA,EAAK,GAAc,IAElF,KAAK,YAAYA,EAAK,GAAG,EAAEA,EAAK,MAAM,IAG9B,QAAA,KAAK,iBAAiBA,CAAI;AAAA,MAEtC,GAEG,KAAA,KAAK,iBAAiB,CAACD,MAAM;AACxB,gBAAA,MAAM,0BAA0BA,CAAC;AAAA,MAAA,GAEnC,QAAA,IAAI,sDAAsDF,CAAa;AAAA,IACjF,CACD;AAAA,EACH;AAAA,EAEO,WAA8BK,GAAQM,GAA2B;AACjE,SAAA,YAAYN,CAAG,IAAIM;AAAA,EAC1B;AAAA,EAEO,QAAQ;AAEb,SAAK,KAAK;EACZ;AAAA,EAEO,QAAQR,GAAmD;AAC3D,SAAA,KAAK,YAAYA,CAAI;AAAA,EAC5B;AACF;"}