(function(o,r){typeof exports=="object"&&typeof module<"u"?r(exports):typeof define=="function"&&define.amd?define(["exports"],r):(o=typeof globalThis<"u"?globalThis:o||self,r(o.YoungRPC={}))})(this,function(o){"use strict";const r="---young-rpc-shake-hands-message-request---";class i{constructor(e=r){this.shakeHandsMsg=e,this.handlersMap={},window.opener&&window.opener!==window?this.masterWindow=window.opener:window.parent&&window.parent!==window&&(this.masterWindow=window.parent),this.shakeHands()}shakeHands(){if(!this.masterWindow)throw new Error("YoungRPCSlave can only be used in sub window");const e=new MessageChannel;this.port=e.port1,this.port.onmessage=n=>{const{data:s,isTrusted:t}=n;t&&s&&(s.cmd&&typeof s.cmd=="string"&&this.handlersMap[s.cmd]?this.handlersMap[s.cmd](s):console.warn("ğŸš€unknown msg",s))},this.port.onmessageerror=n=>{console.error("ğŸš€ ~ YoungRPCSlave ~ e",n)},this.masterWindow.postMessage(this.shakeHandsMsg,"*",[e.port2])}trigger(e,n={}){this.port.postMessage({cmd:e,params:n})}setHandler(e,{success:n,fail:s}={}){return this.handlersMap[e]=async({ok:t,data:a})=>{t?await(n==null?void 0:n(a)):await(s==null?void 0:s(a))},this.trigger.bind(this,e)}}class d{constructor(e=r){this.handlersMap={},window.addEventListener("message",async n=>{n.data===e&&(this.port=n.ports[0],this.port.onmessage=s=>{const{data:t,isTrusted:a}=s;a&&t&&(t.cmd&&typeof t.cmd=="string"&&this.handlersMap[t.cmd]?this.handlersMap[t.cmd](t.params):console.warn("ğŸš€unknown msg",t))},this.port.onmessageerror=s=>{console.error("ğŸš€ ~ YoungRPCMaster ~ ",s)},console.log("ğŸš€ğŸš€ğŸš€ master app is ready ğŸš€ğŸš€ğŸš€, shakeHandsMsg: ",e))})}setHandler(e,n){this.handlersMap[e]=n}close(){this.port.close()}sendMsg(e){this.port.postMessage(e)}}o.YoungRPCMaster=d,o.YoungRPCSlave=i,Object.defineProperty(o,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=index.umd.js.map
