{"version":3,"file":"index.umd.js","sources":["../src/core/share.ts","../src/core/slave.ts","../src/core/master.ts"],"sourcesContent":["/*\r\n * @Author: zhangyang\r\n * @Date: 2022-07-02 15:08:54\r\n * @LastEditTime: 2022-07-02 19:59:17\r\n * @Description: \r\n */\r\nexport const SHAKE_HANDS_MSG = '---young-rpc-shake-hands-message-request---';","/*\r\n * @Author: zhangyang\r\n * @Date: 2022-07-02 14:57:53\r\n * @LastEditTime: 2022-07-31 15:11:23\r\n * @Description: \r\n */\r\nimport { GetParamsSign, Young } from '../../typings';\r\nimport { SHAKE_HANDS_MSG } from './share';\r\n\r\ntype SlaveHandlers<R extends Record<string, any>> = {\r\n  [P in keyof R]?: (args: Young.MasterReturnParams) => Promise<void>;\r\n};\r\n\r\nexport class YoungRPCSlave<R extends Record<string, any>> {\r\n  public port: MessagePort;\r\n  private masterWindow: Window;\r\n  private handlersMap: SlaveHandlers<R> = {};\r\n\r\n  constructor(private shakeHandsMsg = SHAKE_HANDS_MSG) {\r\n    if (window.opener && window.opener !== window) {\r\n      // Áî±Áà∂Á™óÂè£ÈÄöËøá window.open ÊâìÂºÄÁöÑ\r\n      this.masterWindow = window.opener;\r\n    } else if (window.parent && window.parent !== window) {\r\n      // iframe ÂµåÂ•ó\r\n      this.masterWindow = window.parent;\r\n    }\r\n    // ‰∏éÁà∂È°µÈù¢Êè°ÊâãÔºåÂª∫Á´ã‰ø°ÈÅì\r\n    this.shakeHands();\r\n  }\r\n\r\n  public shakeHands() {\r\n    if (!this.masterWindow) {\r\n      throw new Error('YoungRPCSlave can only be used in sub window');\r\n    }\r\n    const channel = new MessageChannel();\r\n    this.port = channel.port1;\r\n    this.port.onmessage = (e) => {\r\n      const { data, isTrusted } = e;\r\n      if (isTrusted && data) {\r\n        if (data.cmd && typeof data.cmd === 'string' && this.handlersMap[data.cmd as keyof R]) {\r\n          // Â∑≤Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\r\n          this.handlersMap[data.cmd](data as Young.MasterReturnParams);\r\n        }  else {\r\n          // Êú™Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\r\n          console.warn('üöÄunknown msg', data);\r\n        }\r\n      }\r\n    };\r\n    this.port.onmessageerror = (e) => {\r\n      console.error('üöÄ ~ YoungRPCSlave ~ e', e);\r\n    };\r\n    \r\n    this.masterWindow.postMessage(this.shakeHandsMsg, '*', [channel.port2]);\r\n  }\r\n\r\n  public trigger<T extends keyof R>(cmd: T, params = {} as GetParamsSign<R[T]>) {\r\n    this.port.postMessage({ cmd, params });\r\n  }\r\n\r\n  public setHandler<T extends keyof R>(cmd: T, { success, fail } = {} as Young.Cbk) {\r\n    this.handlersMap[cmd] = async ({ ok, data }) => {\r\n      if (ok) {\r\n        await success?.(data);\r\n      } else {\r\n        await fail?.(data);\r\n      }\r\n    };\r\n    return this.trigger.bind(this, cmd) as (params: GetParamsSign<R[T]>) => void;\r\n  }\r\n};","/*\r\n * @Author: zhangyang\r\n * @Date: 2022-07-02 14:57:48\r\n * @LastEditTime: 2022-07-31 15:11:45\r\n * @Description: \r\n */\r\nimport { GetParamsSign, Young } from '../../typings';\r\nimport { SHAKE_HANDS_MSG } from './share';\r\n\r\ntype MasterCbk<R extends Record<string, any>, T extends keyof R> = (params: GetParamsSign<R[T]>) => any | Promise<any>;\r\ntype MasterHandlers<R extends Record<string, any>> = {\r\n  [P in keyof R]?: MasterCbk<R, P>;\r\n};\r\n\r\nexport class YoungRPCMaster<R extends Record<string, any>> {\r\n  private port: MessagePort;\r\n  private handlersMap: MasterHandlers<R> = {};\r\n  constructor(shakeHandsMsg = SHAKE_HANDS_MSG) {\r\n    window.addEventListener('message', async (e) => {\r\n      if (e.data === shakeHandsMsg) {\r\n        this.port = e.ports[0];\r\n        this.port.onmessage = (e) => {\r\n          const { data, isTrusted } = e;\r\n          if (isTrusted && data) {\r\n            // ÂèØ‰ª•Ê≠£ÂºèÂ§ÑÁêÜÊ∂àÊÅØ‰∫Ü\r\n            if (data.cmd && typeof data.cmd === 'string' && this.handlersMap[data.cmd as keyof R]) {\r\n              // Â∑≤Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\r\n              this.handlersMap[data.cmd](data.params);\r\n            }  else {\r\n              // Êú™Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\r\n              console.warn('üöÄunknown msg', data);\r\n            }\r\n          }\r\n        };\r\n        this.port.onmessageerror = (e) => {\r\n          console.error('üöÄ ~ YoungRPCMaster ~ ', e);\r\n        };\r\n        console.log('üöÄüöÄüöÄ master app is ready üöÄüöÄüöÄ, shakeHandsMsg: ', shakeHandsMsg);\r\n      }\r\n    });\r\n  }\r\n\r\n  public setHandler<T extends keyof R>(cmd: T, cbk: MasterHandlers<R>[T]) {\r\n    this.handlersMap[cmd] = cbk;\r\n  }\r\n\r\n  public close() {\r\n    // ÂÖ≥Èó≠‰ø°ÈÅì\r\n    this.port.close();\r\n  }\r\n\r\n  public sendMsg(data: Young.MasterReturnParams & { cmd: keyof R }) {\r\n    this.port.postMessage(data);\r\n  }\r\n};"],"names":[],"mappings":"kPAMO,KAAM,GAAkB,8CCOxB,MAAM,CAA6C,CAKxD,YAAoB,EAAgB,EAAiB,CAAjC,KAAA,cAAA,EAFpB,KAAQ,YAAgC,GAGtC,AAAI,OAAO,QAAU,OAAO,SAAW,OAErC,KAAK,aAAe,OAAO,OAClB,OAAO,QAAU,OAAO,SAAW,QAE5C,MAAK,aAAe,OAAO,QAG7B,KAAK,WAAW,CAClB,CAEA,YAAoB,CACd,GAAA,CAAC,KAAK,aACF,KAAA,IAAI,OAAM,8CAA8C,EAE1D,KAAA,GAAU,GAAI,gBACpB,KAAK,KAAO,EAAQ,MACf,KAAA,KAAK,UAAY,AAAC,GAAM,CACrB,KAAA,CAAE,OAAM,aAAc,EAC5B,AAAI,GAAa,GACX,CAAA,EAAK,KAAO,MAAO,GAAK,KAAQ,UAAY,KAAK,YAAY,EAAK,KAE/D,KAAA,YAAY,EAAK,KAAK,CAAgC,EAGnD,QAAA,KAAK,uBAAiB,CAAI,EAEtC,EAEG,KAAA,KAAK,eAAiB,AAAC,GAAM,CACxB,QAAA,MAAM,gCAA0B,CAAC,CAAA,EAGtC,KAAA,aAAa,YAAY,KAAK,cAAe,IAAK,CAAC,EAAQ,KAAK,CAAC,CACxE,CAEA,QAAkC,EAAQ,EAAS,GAA2B,CAC5E,KAAK,KAAK,YAAY,CAAE,MAAK,QAAQ,CAAA,CACvC,CAEA,WAAqC,EAAQ,CAAE,UAAS,QAAS,CAAA,EAAiB,CAChF,YAAK,YAAY,GAAO,MAAO,CAAE,KAAI,UAAW,CAC9C,AAAI,EACF,KAAM,kBAAU,IAEhB,KAAM,kBAAO,GACf,EAEK,KAAK,QAAQ,KAAK,KAAM,CAAG,CACpC,CACF,CCvDO,MAAM,CAA8C,CAGzD,YAAY,EAAgB,EAAiB,CAD7C,KAAQ,YAAiC,GAEhC,OAAA,iBAAiB,UAAW,KAAO,IAAM,CAC1C,AAAA,EAAE,OAAS,GACR,MAAA,KAAO,EAAE,MAAM,GACf,KAAA,KAAK,UAAY,AAAC,GAAM,CACrB,KAAA,CAAE,OAAM,aAAc,EAC5B,AAAI,GAAa,GAEX,CAAA,EAAK,KAAO,MAAO,GAAK,KAAQ,UAAY,KAAK,YAAY,EAAK,KAEpE,KAAK,YAAY,EAAK,KAAK,EAAK,MAAM,EAG9B,QAAA,KAAK,uBAAiB,CAAI,EAEtC,EAEG,KAAA,KAAK,eAAiB,AAAC,GAAM,CACxB,QAAA,MAAM,gCAA0B,CAAC,CAAA,EAEnC,QAAA,IAAI,+FAAsD,CAAa,EACjF,CACD,CACH,CAEO,WAA8B,EAAQ,EAA2B,CACtE,KAAK,YAAY,GAAO,CAC1B,CAEA,OAAe,CAEb,KAAK,KAAK,OACZ,CAEO,QAAQ,EAAmD,CAC3D,KAAA,KAAK,YAAY,CAAI,CAC5B,CACF"}