{"version":3,"file":"index.cjs.js","sources":["../src/core/share.ts","../src/core/slave.ts","../src/core/master.ts"],"sourcesContent":["/*\n * @Author: zhangyang\n * @Date: 2022-07-02 15:08:54\n * @LastEditTime: 2022-07-02 19:59:17\n * @Description: \n */\nexport const SHAKE_HANDS_MSG = '---young-rpc-shake-hands-message-request---';","/*\n * @Author: zhangyang\n * @Date: 2022-07-02 14:57:53\n * @LastEditTime: 2022-07-31 15:11:23\n * @Description: \n */\nimport { GetParamsSign, Young } from '../../typings';\nimport { SHAKE_HANDS_MSG } from './share';\n\ntype SlaveHandlers<R extends Record<string, any>> = {\n  [P in keyof R]?: (args: Young.MasterReturnParams) => Promise<void>;\n};\n\nexport class YoungRPCSlave<R extends Record<string, any>> {\n  public port: MessagePort;\n  private masterWindow: Window;\n  private handlersMap: SlaveHandlers<R> = {};\n\n  constructor(private shakeHandsMsg = SHAKE_HANDS_MSG) {\n    if (window.opener && window.opener !== window) {\n      // Áî±Áà∂Á™óÂè£ÈÄöËøá window.open ÊâìÂºÄÁöÑ\n      this.masterWindow = window.opener;\n    } else if (window.parent && window.parent !== window) {\n      // iframe ÂµåÂ•ó\n      this.masterWindow = window.parent;\n    }\n    // ‰∏éÁà∂È°µÈù¢Êè°ÊâãÔºåÂª∫Á´ã‰ø°ÈÅì\n    this.shakeHands();\n  }\n\n  public shakeHands() {\n    if (!this.masterWindow) {\n      throw new Error('YoungRPCSlave can only be used in sub window');\n    }\n    const channel = new MessageChannel();\n    this.port = channel.port1;\n    this.port.onmessage = (e) => {\n      const { data, isTrusted } = e;\n      if (isTrusted && data) {\n        if (data.cmd && typeof data.cmd === 'string' && this.handlersMap[data.cmd as keyof R]) {\n          // Â∑≤Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\n          this.handlersMap[data.cmd](data as Young.MasterReturnParams);\n        }  else {\n          // Êú™Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\n          console.warn('üöÄunknown msg', data);\n        }\n      }\n    };\n    this.port.onmessageerror = (e) => {\n      console.error('üöÄ ~ YoungRPCSlave ~ e', e);\n    };\n    \n    this.masterWindow.postMessage(this.shakeHandsMsg, '*', [channel.port2]);\n  }\n\n  public trigger<T extends keyof R>(cmd: T, params = {} as GetParamsSign<R[T]>) {\n    this.port.postMessage({ cmd, params });\n  }\n\n  public setHandler<T extends keyof R>(cmd: T, { success, fail } = {} as Young.Cbk) {\n    this.handlersMap[cmd] = async ({ ok, data }) => {\n      if (ok) {\n        await success?.(data);\n      } else {\n        await fail?.(data);\n      }\n    };\n    return this.trigger.bind(this, cmd) as (params: GetParamsSign<R[T]>) => ReturnType<R[T]>;\n  }\n};","/*\n * @Author: zhangyang\n * @Date: 2022-07-02 14:57:48\n * @LastEditTime: 2022-07-31 15:11:45\n * @Description: \n */\nimport { GetParamsSign, Young } from '../../typings';\nimport { SHAKE_HANDS_MSG } from './share';\n\ntype MasterCbk<R extends Record<string, any>, T extends keyof R> = (params: GetParamsSign<R[T]>) => any | Promise<any>;\ntype MasterHandlers<R extends Record<string, any>> = {\n  [P in keyof R]?: MasterCbk<R, P>;\n};\n\nexport class YoungRPCMaster<R extends Record<string, any>> {\n  private port: MessagePort;\n  private handlersMap: MasterHandlers<R> = {};\n  constructor(shakeHandsMsg = SHAKE_HANDS_MSG) {\n    window.addEventListener('message', async (e) => {\n      if (e.data === shakeHandsMsg) {\n        this.port = e.ports[0];\n        this.port.onmessage = (e) => {\n          const { data, isTrusted } = e;\n          if (isTrusted && data) {\n            // ÂèØ‰ª•Ê≠£ÂºèÂ§ÑÁêÜÊ∂àÊÅØ‰∫Ü\n            if (data.cmd && typeof data.cmd === 'string' && this.handlersMap[data.cmd as keyof R]) {\n              // Â∑≤Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\n              this.handlersMap[data.cmd](data.params);\n            }  else {\n              // Êú™Áü•ÁöÑÊ∂àÊÅØÁ±ªÂûã\n              console.warn('üöÄunknown msg', data);\n            }\n          }\n        };\n        this.port.onmessageerror = (e) => {\n          console.error('üöÄ ~ YoungRPCMaster ~ ', e);\n        };\n        console.log('üöÄüöÄüöÄ master app is ready üöÄüöÄüöÄ, shakeHandsMsg: ', shakeHandsMsg);\n      }\n    });\n  }\n\n  public setHandler<T extends keyof R>(cmd: T, cbk: MasterHandlers<R>[T]) {\n    this.handlersMap[cmd] = cbk;\n  }\n\n  public close() {\n    // ÂÖ≥Èó≠‰ø°ÈÅì\n    this.port.close();\n  }\n\n  public sendMsg(data: Young.MasterReturnParams & { cmd: keyof R }) {\n    this.port.postMessage(data);\n  }\n};"],"names":["SHAKE_HANDS_MSG","YoungRPCSlave","shakeHandsMsg","channel","e","data","isTrusted","cmd","params","success","fail","ok","YoungRPCMaster","cbk"],"mappings":"gFAMO,MAAMA,EAAkB,8CCOxB,MAAMC,CAA6C,CAKxD,YAAoBC,EAAgBF,EAAiB,CAAjC,KAAA,cAAAE,EAFpB,KAAQ,YAAgC,GAGlC,OAAO,QAAU,OAAO,SAAW,OAErC,KAAK,aAAe,OAAO,OAClB,OAAO,QAAU,OAAO,SAAW,SAE5C,KAAK,aAAe,OAAO,QAG7B,KAAK,WAAW,CAClB,CAEO,YAAa,CACd,GAAA,CAAC,KAAK,aACF,MAAA,IAAI,MAAM,8CAA8C,EAE1D,MAAAC,EAAU,IAAI,eACpB,KAAK,KAAOA,EAAQ,MACf,KAAA,KAAK,UAAaC,GAAM,CACrB,KAAA,CAAE,KAAAC,EAAM,UAAAC,CAAc,EAAAF,EACxBE,GAAaD,IACXA,EAAK,KAAO,OAAOA,EAAK,KAAQ,UAAY,KAAK,YAAYA,EAAK,GAAc,EAElF,KAAK,YAAYA,EAAK,GAAG,EAAEA,CAAgC,EAGnD,QAAA,KAAK,gBAAiBA,CAAI,EAEtC,EAEG,KAAA,KAAK,eAAkBD,GAAM,CACxB,QAAA,MAAM,yBAA0BA,CAAC,CAAA,EAGtC,KAAA,aAAa,YAAY,KAAK,cAAe,IAAK,CAACD,EAAQ,KAAK,CAAC,CACxE,CAEO,QAA2BI,EAAQC,EAAS,GAA2B,CAC5E,KAAK,KAAK,YAAY,CAAE,IAAAD,EAAK,OAAAC,CAAQ,CAAA,CACvC,CAEO,WAA8BD,EAAQ,CAAE,QAAAE,EAAS,KAAAC,CAAK,EAAI,CAAA,EAAiB,CAChF,YAAK,YAAYH,CAAG,EAAI,MAAO,CAAE,GAAAI,EAAI,KAAAN,KAAW,CAC1CM,EACF,MAAMF,GAAA,YAAAA,EAAUJ,IAEhB,MAAMK,GAAA,YAAAA,EAAOL,GACf,EAEK,KAAK,QAAQ,KAAK,KAAME,CAAG,CACpC,CACF,CCvDO,MAAMK,CAA8C,CAGzD,YAAYV,EAAgBF,EAAiB,CAD7C,KAAQ,YAAiC,GAEhC,OAAA,iBAAiB,UAAW,MAAOI,GAAM,CAC1CA,EAAE,OAASF,IACR,KAAA,KAAOE,EAAE,MAAM,CAAC,EAChB,KAAA,KAAK,UAAaA,GAAM,CACrB,KAAA,CAAE,KAAAC,EAAM,UAAAC,CAAcF,EAAAA,EACxBE,GAAaD,IAEXA,EAAK,KAAO,OAAOA,EAAK,KAAQ,UAAY,KAAK,YAAYA,EAAK,GAAc,EAElF,KAAK,YAAYA,EAAK,GAAG,EAAEA,EAAK,MAAM,EAG9B,QAAA,KAAK,gBAAiBA,CAAI,EAEtC,EAEG,KAAA,KAAK,eAAkBD,GAAM,CACxB,QAAA,MAAM,yBAA0BA,CAAC,CAAA,EAEnC,QAAA,IAAI,qDAAsDF,CAAa,EACjF,CACD,CACH,CAEO,WAA8BK,EAAQM,EAA2B,CACjE,KAAA,YAAYN,CAAG,EAAIM,CAC1B,CAEO,OAAQ,CAEb,KAAK,KAAK,OACZ,CAEO,QAAQR,EAAmD,CAC3D,KAAA,KAAK,YAAYA,CAAI,CAC5B,CACF"}