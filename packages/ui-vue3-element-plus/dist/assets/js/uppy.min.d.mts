declare var Vo: {
    new (e: any, t: any): {
        recordingLengthTimer: NodeJS.Timer;
        id: any;
        type: string;
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        defaultLocale: {
            strings: {
                pluginNameAudio: string;
                startAudioRecording: string;
                stopAudioRecording: string;
                allowAudioAccessTitle: string;
                allowAudioAccessDescription: string;
                noAudioTitle: string;
                noAudioDescription: string;
                recordingStoppedMaxSize: string;
                recordingLength: string;
                submitRecordedFile: string;
                discardRecordedFile: string;
            };
        };
        opts: any;
        title: any;
        render(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var el: {
    new (e: any, t: any): {
        type: string | undefined;
        id: any;
        title: string | undefined;
        defaultLocale: {
            strings: {
                timedOut: string;
            };
        } | undefined;
        opts: any;
        client: any;
        getUploadParameters(e: any): any;
        uploadFile(e: any, t: any, r: any): any;
        install(): void;
        uninstall(): void;
        uppy: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var no: {
    new (e: any, t: any): {
        type: string;
        id: any;
        title: string;
        requests: any;
        uploaders: any;
        uploaderEvents: any;
        uploaderSockets: any;
        setOptions(e: any): void;
        resetUploaderReferences(e: any, t: any): void;
        assertHost(e: any): void;
        createMultipartUpload(e: any, t: any): any;
        listParts(e: any, t: any, r: any): any;
        completeMultipartUpload(e: any, t: any, r: any): any;
        createSignedURL(e: any, t: any): Promise<{
            method: string;
            expires: number;
            fields: {};
            url: string;
            headers: {
                "Content-Type": any;
            };
        }>;
        signPart(e: any, t: any): any;
        abortMultipartUpload(e: any, t: any, r: any): any;
        getUploadParameters(e: any, t: any): any;
        install(): void;
        uninstall(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    uploadPartBytes(e: any): Promise<any>;
    VERSION: string;
};
declare var Oe: {
    new (e: any, t: any): {
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        install(): void;
        uninstall(): void;
        update(e: any): void;
        afterUpdate(): void;
    };
};
declare var Xr: {
    new (e: any, t: any): {
        id: any;
        type: string;
        storage: any;
        files: any[];
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            tokenKey: string;
            companionKeysParams: any;
            preAuthToken: any;
            supportsRefreshToken: any;
            headers(): Promise<any>;
            onReceiveResponse(e: any): any;
            setAuthToken(e: any): Promise<any>;
            removeAuthToken(): Promise<any>;
            ensurePreAuth(): Promise<void>;
            authQuery(e: any): {};
            authUrl(e: any): string;
            loginSimpleAuth(e: any): Promise<void>;
            loginOAuth(e: any): Promise<any>;
            login(e: any): Promise<any>;
            refreshTokenUrl(): string;
            fileUrl(e: any): string;
            request(...args: any[]): Promise<any>;
            fetchPreAuthToken(): Promise<void>;
            list(e: any, t: any): Promise<any>;
            logout(e: any): Promise<any>;
            uppy: any;
            opts: any;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        defaultLocale: {
            strings: {
                pluginNameBox: string;
            };
        };
        title: any;
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        view: {
            filterQuery(e: any): void;
            clearFilter(): void;
            getFolder(e: any, t: any): Promise<void>;
            getNextFolder(e: any): void;
            logout(): Promise<void>;
            handleAuth(e: any): Promise<void>;
            handleScroll(e: any): Promise<void>;
            donePicking(): Promise<void>;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            nextPagePath: any;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            toggleCheckbox(e: any, t: any): void;
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var lc: {
    new (e: any, t: any): {
        id: any;
        type: string;
        defaultLocale: {
            strings: {
                compressingImages: string;
                compressedX: string;
            };
        };
        opts: any;
        prepareUpload(e: any): Promise<void>;
        compress(e: any): Promise<any>;
        install(): void;
        uninstall(): void;
        uppy: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
};
declare function HM(): void;
declare var jo: {
    new (e: any, t: any): {
        modalName: string;
        superFocus: any;
        ifFocusedOnUppyRecently: boolean;
        removeTarget: (l: any) => void;
        addTarget: (l: any) => any;
        hideAllPanels: () => void;
        showPanel: (l: any) => void;
        canEditFile: (l: any) => any;
        openFileEditor: (l: any) => void;
        closeFileEditor: () => void;
        saveFileEditor: () => void;
        openModal: () => Promise<any>;
        savedScrollPosition: number;
        savedActiveElement: Element | null;
        closeModal: (l: any) => Promise<any> | undefined;
        isModalOpen: () => boolean;
        requestCloseModal: () => any;
        setDarkModeCapability: (l: any) => void;
        handleSystemDarkModeChange: (l: any) => void;
        toggleFileCard: (l: any, h: any) => void;
        toggleAddFilesPanel: (l: any) => void;
        addFiles: (l: any) => void;
        startListeningToResize: () => void;
        resizeObserver: ResizeObserver;
        makeDashboardInsidesVisibleAnywayTimeout: NodeJS.Timeout;
        stopListeningToResize: () => void;
        recordIfFocusedOnUppyRecently: (l: any) => void;
        disableInteractiveElements: (l: any) => void;
        dashboardIsDisabled: any;
        updateBrowserHistory: () => void;
        handlePopState: (l: any) => void;
        handleKeyDownInModal: (l: any) => void;
        handleClickOutside: () => void;
        handlePaste: (l: any) => void;
        handleInputChange: (l: any) => void;
        handleDragOver: (l: any) => void;
        handleDragLeave: (l: any) => void;
        removeDragOverClassTimeout: NodeJS.Timeout;
        handleDrop: (l: any) => Promise<void>;
        handleRequestThumbnail: (l: any) => void;
        handleCancelThumbnail: (l: any) => void;
        handleKeyDownInInline: (l: any) => void;
        handlePasteOnBody: (l: any) => void;
        handleComplete: (l: any) => void;
        handleCancelRestore: () => void;
        initEvents: () => void;
        removeEvents: () => void;
        superFocusOnEachUpdate: () => void;
        afterUpdate: () => void;
        saveFileCard: (l: any, h: any) => void;
        render: (l: any) => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install: () => void;
        darkModeMediaQuery: MediaQueryList | null;
        uninstall: () => void;
        id: any;
        title: string;
        type: string;
        defaultLocale: {
            strings: {
                closeModal: string;
                addMoreFiles: string;
                addingMoreFiles: string;
                importFrom: string;
                dashboardWindowTitle: string;
                dashboardTitle: string;
                copyLinkToClipboardSuccess: string;
                copyLinkToClipboardFallback: string;
                copyLink: string;
                back: string;
                removeFile: string;
                editFile: string;
                editImage: string;
                editing: string;
                error: string;
                finishEditingFile: string;
                saveChanges: string;
                myDevice: string;
                dropHint: string;
                uploadComplete: string;
                uploadPaused: string;
                resumeUpload: string;
                pauseUpload: string;
                retryUpload: string;
                cancelUpload: string;
                xFilesSelected: {
                    0: string;
                    1: string;
                };
                uploadingXFiles: {
                    0: string;
                    1: string;
                };
                processingXFiles: {
                    0: string;
                    1: string;
                };
                poweredBy: string;
                addMore: string;
                editFileWithFilename: string;
                save: string;
                cancel: string;
                dropPasteFiles: string;
                dropPasteFolders: string;
                dropPasteBoth: string;
                dropPasteImportFiles: string;
                dropPasteImportFolders: string;
                dropPasteImportBoth: string;
                importFiles: string;
                browseFiles: string;
                browseFolders: string;
                recoveredXFiles: {
                    0: string;
                    1: string;
                };
                recoveredAllFiles: string;
                sessionRestored: string;
                reSelect: string;
                missingRequiredMetaFields: {
                    0: string;
                    1: string;
                };
                takePictureBtn: string;
                recordVideoBtn: string;
            };
        };
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
    };
    VERSION: string;
};
declare var Fc: {
    new (): {
        state: {};
        getState(): {};
        setState(e: any): void;
        subscribe(e: any): () => void;
    };
    VERSION: string;
};
declare var zo: {
    new (e: any, t: any): {
        isDragDropSupported: boolean;
        addFiles: (r: any) => void;
        onInputChange: (r: any) => void;
        handleDragOver: (r: any) => void;
        handleDragLeave: (r: any) => void;
        removeDragOverClassTimeout: NodeJS.Timeout;
        handleDrop: (r: any) => Promise<void>;
        type: string;
        id: any;
        title: string;
        defaultLocale: {
            strings: {
                dropHereOr: string;
                browse: string;
            };
        };
        renderHiddenFileInput(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        fileInputRef: any;
        renderLabel(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        renderNote(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        render(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    renderArrowSvg(): {
        type: any;
        props: any;
        key: any;
        ref: any;
        __k: null;
        __: null;
        __b: number;
        __e: null;
        __d: undefined;
        __c: null;
        __h: null;
        constructor: undefined;
        __v: any;
    };
    VERSION: string;
};
declare var ya: {
    new (e: any, t: any): {
        addFiles: (r: any) => void;
        handleDrop: (r: any) => Promise<void>;
        handleDragOver: (r: any) => void;
        handleDragLeave: (r: any) => void;
        removeDragOverClassTimeout: NodeJS.Timeout;
        addListeners: () => void;
        nodes: Element[];
        removeListeners: () => void;
        type: string;
        id: any;
        title: string;
        install(): void;
        uninstall(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Yr: {
    new (e: any, t: any): {
        id: any;
        type: string;
        storage: any;
        files: any[];
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            tokenKey: string;
            companionKeysParams: any;
            preAuthToken: any;
            supportsRefreshToken: any;
            headers(): Promise<any>;
            onReceiveResponse(e: any): any;
            setAuthToken(e: any): Promise<any>;
            removeAuthToken(): Promise<any>;
            ensurePreAuth(): Promise<void>;
            authQuery(e: any): {};
            authUrl(e: any): string;
            loginSimpleAuth(e: any): Promise<void>;
            loginOAuth(e: any): Promise<any>;
            login(e: any): Promise<any>;
            refreshTokenUrl(): string;
            fileUrl(e: any): string;
            request(...args: any[]): Promise<any>;
            fetchPreAuthToken(): Promise<void>;
            list(e: any, t: any): Promise<any>;
            logout(e: any): Promise<any>;
            uppy: any;
            opts: any;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        defaultLocale: {
            strings: {
                pluginNameDropbox: string;
            };
        };
        title: any;
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        view: {
            filterQuery(e: any): void;
            clearFilter(): void;
            getFolder(e: any, t: any): Promise<void>;
            getNextFolder(e: any): void;
            logout(): Promise<void>;
            handleAuth(e: any): Promise<void>;
            handleScroll(e: any): Promise<void>;
            donePicking(): Promise<void>;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            nextPagePath: any;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            toggleCheckbox(e: any, t: any): void;
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Qr: {
    new (e: any, t: any): {
        id: any;
        type: string;
        storage: any;
        files: any[];
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            tokenKey: string;
            companionKeysParams: any;
            preAuthToken: any;
            supportsRefreshToken: any;
            headers(): Promise<any>;
            onReceiveResponse(e: any): any;
            setAuthToken(e: any): Promise<any>;
            removeAuthToken(): Promise<any>;
            ensurePreAuth(): Promise<void>;
            authQuery(e: any): {};
            authUrl(e: any): string;
            loginSimpleAuth(e: any): Promise<void>;
            loginOAuth(e: any): Promise<any>;
            login(e: any): Promise<any>;
            refreshTokenUrl(): string;
            fileUrl(e: any): string;
            request(...args: any[]): Promise<any>;
            fetchPreAuthToken(): Promise<void>;
            list(e: any, t: any): Promise<any>;
            logout(e: any): Promise<any>;
            uppy: any;
            opts: any;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        defaultLocale: {
            strings: {
                pluginNameFacebook: string;
            };
        };
        title: any;
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        view: {
            filterQuery(e: any): void;
            clearFilter(): void;
            getFolder(e: any, t: any): Promise<void>;
            getNextFolder(e: any): void;
            logout(): Promise<void>;
            handleAuth(e: any): Promise<void>;
            handleScroll(e: any): Promise<void>;
            donePicking(): Promise<void>;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            nextPagePath: any;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            toggleCheckbox(e: any, t: any): void;
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Ho: {
    new (e: any, t: any): {
        id: any;
        title: string;
        type: string;
        defaultLocale: {
            strings: {
                chooseFiles: string;
            };
        };
        render(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        handleInputChange(e: any): void;
        handleClick(): void;
        addFiles(e: any): void;
        input: any;
        install(): void;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Tl: {
    new (e: any, t: any): {
        type: string;
        id: any;
        handleFormSubmit(e: any): void;
        handleUploadStart(): void;
        handleSuccess(e: any): void;
        addResultToForm(e: any): void;
        getMetaFromForm(): void;
        install(): void;
        form: any;
        uninstall(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Rl: {
    new (e: any, t: any): {
        addBlobToStores: (r: any) => void;
        removeBlobFromStores: (r: any) => void;
        replaceBlobInStores: (r: any) => void;
        handleRestoreConfirmed: () => void;
        abortRestore: () => void;
        handleComplete: (r: any) => void;
        restoreBlobs: () => void;
        type: string;
        id: any;
        MetaDataStore: {
            opts: any;
            name: string;
            load(): any;
            save(e: any): void;
        };
        ServiceWorkerStore: {
            name: any;
            ready: Promise<any>;
            list(): Promise<any>;
            put(e: any): Promise<void>;
            delete(e: any): Promise<void>;
        } | null;
        IndexedDBStore: {
            opts: any;
            name: any;
            ready: Promise<any>;
            key(e: any): string;
            list(): Promise<{
                [k: string]: any;
            }>;
            get(e: any): Promise<{
                id: any;
                data: any;
            }>;
            getSize(): Promise<any>;
            put(e: any): Promise<any>;
            delete(e: any): Promise<any>;
        };
        saveFilesStateToLocalStorage(): void;
        restoreState(): void;
        loadFileBlobsFromServiceWorker(): Promise<any>;
        loadFileBlobsFromIndexedDB(): Promise<{
            [k: string]: any;
        } | {}>;
        onBlobsLoaded(e: any): void;
        savedPluginData: any;
        getWaitingFiles(): {};
        getUploadingFiles(): {};
        deleteBlobs(e: any): Promise<void>;
        install(): void;
        uninstall(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Jr: {
    new (e: any, t: any): {
        type: string;
        storage: any;
        files: any[];
        id: any;
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            tokenKey: string;
            companionKeysParams: any;
            preAuthToken: any;
            supportsRefreshToken: any;
            headers(): Promise<any>;
            onReceiveResponse(e: any): any;
            setAuthToken(e: any): Promise<any>;
            removeAuthToken(): Promise<any>;
            ensurePreAuth(): Promise<void>;
            authQuery(e: any): {};
            authUrl(e: any): string;
            loginSimpleAuth(e: any): Promise<void>;
            loginOAuth(e: any): Promise<any>;
            login(e: any): Promise<any>;
            refreshTokenUrl(): string;
            fileUrl(e: any): string;
            request(...args: any[]): Promise<any>;
            fetchPreAuthToken(): Promise<void>;
            list(e: any, t: any): Promise<any>;
            logout(e: any): Promise<any>;
            uppy: any;
            opts: any;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        defaultLocale: {
            strings: {
                pluginNameGoogleDrive: string;
            };
        };
        title: any;
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        view: {
            toggleCheckbox(e: any, t: any): void;
            filterQuery(e: any): void;
            clearFilter(): void;
            getFolder(e: any, t: any): Promise<void>;
            getNextFolder(e: any): void;
            logout(): Promise<void>;
            handleAuth(e: any): Promise<void>;
            handleScroll(e: any): Promise<void>;
            donePicking(): Promise<void>;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            nextPagePath: any;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Zr: {
    new (e: any, t: any): {
        type: string;
        storage: any;
        files: any[];
        id: any;
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            tokenKey: string;
            companionKeysParams: any;
            preAuthToken: any;
            supportsRefreshToken: any;
            headers(): Promise<any>;
            onReceiveResponse(e: any): any;
            setAuthToken(e: any): Promise<any>;
            removeAuthToken(): Promise<any>;
            ensurePreAuth(): Promise<void>;
            authQuery(e: any): {};
            authUrl(e: any): string;
            loginSimpleAuth(e: any): Promise<void>;
            loginOAuth(e: any): Promise<any>;
            login(e: any): Promise<any>;
            refreshTokenUrl(): string;
            fileUrl(e: any): string;
            request(...args: any[]): Promise<any>;
            fetchPreAuthToken(): Promise<void>;
            list(e: any, t: any): Promise<any>;
            logout(e: any): Promise<any>;
            uppy: any;
            opts: any;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        defaultLocale: {
            strings: {
                pluginNameGooglePhotos: string;
            };
        };
        title: any;
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        view: {
            filterQuery(e: any): void;
            clearFilter(): void;
            getFolder(e: any, t: any): Promise<void>;
            getNextFolder(e: any): void;
            logout(): Promise<void>;
            handleAuth(e: any): Promise<void>;
            handleScroll(e: any): Promise<void>;
            donePicking(): Promise<void>;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            nextPagePath: any;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            toggleCheckbox(e: any, t: any): void;
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var $o: {
    new (e: any, t: any): {
        save: () => void;
        storeCropperInstance: (r: any) => void;
        cropper: any;
        selectFile: (r: any) => void;
        id: any;
        title: string;
        type: string;
        defaultLocale: {
            strings: {
                revert: string;
                rotate: string;
                zoomIn: string;
                zoomOut: string;
                flipHorizontal: string;
                aspectRatioSquare: string;
                aspectRatioLandscape: string;
                aspectRatioPortrait: string;
            };
        };
        canEditFile(e: any): boolean;
        install(): void;
        uninstall(): void;
        render(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        } | null;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Gr: {
    new (e: any, t: any): {
        render: (r: any) => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        type: string;
        id: any;
        title: string;
        install(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        uninstall(): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var es: {
    new (e: any, t: any): {
        type: string;
        files: any[];
        storage: any;
        id: any;
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        defaultLocale: {
            strings: {
                pluginNameInstagram: string;
            };
        };
        title: any;
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            tokenKey: string;
            companionKeysParams: any;
            preAuthToken: any;
            supportsRefreshToken: any;
            headers(): Promise<any>;
            onReceiveResponse(e: any): any;
            setAuthToken(e: any): Promise<any>;
            removeAuthToken(): Promise<any>;
            ensurePreAuth(): Promise<void>;
            authQuery(e: any): {};
            authUrl(e: any): string;
            loginSimpleAuth(e: any): Promise<void>;
            loginOAuth(e: any): Promise<any>;
            login(e: any): Promise<any>;
            refreshTokenUrl(): string;
            fileUrl(e: any): string;
            request(...args: any[]): Promise<any>;
            fetchPreAuthToken(): Promise<void>;
            list(e: any, t: any): Promise<any>;
            logout(e: any): Promise<any>;
            uppy: any;
            opts: any;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        view: {
            filterQuery(e: any): void;
            clearFilter(): void;
            getFolder(e: any, t: any): Promise<void>;
            getNextFolder(e: any): void;
            logout(): Promise<void>;
            handleAuth(e: any): Promise<void>;
            handleScroll(e: any): Promise<void>;
            donePicking(): Promise<void>;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            nextPagePath: any;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            toggleCheckbox(e: any, t: any): void;
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var ts: {
    new (e: any, t: any): {
        type: string;
        files: any[];
        storage: any;
        id: any;
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            tokenKey: string;
            companionKeysParams: any;
            preAuthToken: any;
            supportsRefreshToken: any;
            headers(): Promise<any>;
            onReceiveResponse(e: any): any;
            setAuthToken(e: any): Promise<any>;
            removeAuthToken(): Promise<any>;
            ensurePreAuth(): Promise<void>;
            authQuery(e: any): {};
            authUrl(e: any): string;
            loginSimpleAuth(e: any): Promise<void>;
            loginOAuth(e: any): Promise<any>;
            login(e: any): Promise<any>;
            refreshTokenUrl(): string;
            fileUrl(e: any): string;
            request(...args: any[]): Promise<any>;
            fetchPreAuthToken(): Promise<void>;
            list(e: any, t: any): Promise<any>;
            logout(e: any): Promise<any>;
            uppy: any;
            opts: any;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        defaultLocale: {
            strings: {
                pluginNameOneDrive: string;
            };
        };
        title: any;
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        view: {
            filterQuery(e: any): void;
            clearFilter(): void;
            getFolder(e: any, t: any): Promise<void>;
            getNextFolder(e: any): void;
            logout(): Promise<void>;
            handleAuth(e: any): Promise<void>;
            handleScroll(e: any): Promise<void>;
            donePicking(): Promise<void>;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            nextPagePath: any;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            toggleCheckbox(e: any, t: any): void;
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var qo: {
    new (e: any, t: any): {
        id: any;
        title: string;
        type: string;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var kl: {
    new (e: any, t: any): {
        type: string;
        id: any;
        title: string;
        opts: any;
        handleStateChange(e: any, t: any): void;
        initDevTools(): void;
        devTools: any;
        devToolsUnsubscribe: any;
        install(): void;
        withDevTools: any;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        render(e: any): void;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var r2: {
    new (e: any): {
        setState(e: any): void;
        getState(): any;
        subscribe(e: any): any;
    };
    VERSION: string;
};
declare var Fa: {
    new (e: any, t: any): {
        id: any;
        type: string;
        setOptions(e: any): void;
        install(): void;
        uninstall(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Wo: {
    new (e: any, t: any): {
        mediaDevices: MediaDevices;
        protocol: string;
        id: any;
        title: any;
        type: string;
        icon: typeof Rd;
        defaultLocale: {
            strings: {
                startCapturing: string;
                stopCapturing: string;
                submitRecordedFile: string;
                streamActive: string;
                streamPassive: string;
                micDisabled: string;
                recording: string;
            };
        };
        install(): null | undefined;
        setPluginState: any;
        render(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        start(): Promise<void>;
        stop(): void;
        startRecording(): void;
        stopRecording(): Promise<void>;
        submit(): void;
        streamInterrupted: any;
        captureActive: boolean;
        capturedMediaFile: {
            source: any;
            name: string;
            data: Blob;
            type: any;
        } | null;
        uninstall(): void;
        selectVideoStreamSource(): Promise<any>;
        videoStream: MediaStream | null | undefined;
        userDenied: boolean | undefined;
        selectAudioStreamSource(): Promise<any>;
        audioStream: MediaStream | null | undefined;
        recordingChunks: any[] | null | undefined;
        outputStream: MediaStream | null | undefined;
        recorder: MediaRecorder | null | undefined;
        streamInactivated(): void;
        getVideo(): Promise<{
            source: any;
            name: string;
            data: Blob;
            type: any;
        }>;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Wr: {
    new (e: any, t: any): {
        startUpload: () => any;
        id: any;
        title: string;
        type: string;
        defaultLocale: {
            strings: {
                uploading: string;
                complete: string;
                uploadFailed: string;
                paused: string;
                retry: string;
                cancel: string;
                pause: string;
                resume: string;
                done: string;
                filesUploadedOfTotal: {
                    0: string;
                    1: string;
                };
                dataUploadedOfTotal: string;
                xTimeLeft: string;
                uploadXFiles: {
                    0: string;
                    1: string;
                };
                uploadXNewFiles: {
                    0: string;
                    1: string;
                };
                upload: string;
                retryUpload: string;
                xMoreFilesAdded: {
                    0: string;
                    1: string;
                };
                showErrorDetails: string;
            };
        };
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        onMount(): void;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Is: {
    new (e: any, t: any): {
        onFileAdded: (r: any) => void;
        onCancelRequest: (r: any) => void;
        onFileRemoved: (r: any) => void;
        onRestored: () => void;
        onAllFilesRemoved: () => void;
        queue: any[];
        waitUntilAllProcessed: (r: any) => Promise<any>;
        type: string;
        id: any;
        title: string;
        queueProcessing: boolean;
        defaultThumbnailDimension: number;
        thumbnailType: any;
        defaultLocale: {
            strings: {
                generatingThumbnails: string;
            };
        };
        createThumbnail(e: any, t: any, r: any): Promise<string>;
        getProportionalDimensions(e: any, t: any, r: any, s: any): {
            width: any;
            height: number;
        } | {
            width: number;
            height: any;
        };
        resizeImage(e: any, t: any, r: any): any;
        setPreviewURL(e: any, t: any): void;
        addToQueue(e: any): void;
        processQueue(): any;
        requestThumbnail(e: any): Promise<void>;
        install(): void;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        render(e: any): void;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var tr: {
    new (e: any, t: any): {
        restored: Promise<void> | null;
        type: string;
        id: any;
        defaultLocale: {
            strings: {
                creatingAssembly: string;
                creatingAssemblyFailed: string;
                encoding: string;
            };
        };
        client: {
            opts: any;
            createAssembly(e: any): Promise<any>;
            reserveFile(e: any, t: any): Promise<any>;
            addFile(e: any, t: any): Promise<any>;
            cancelAssembly(e: any): Promise<any>;
            getAssemblyStatus(e: any): Promise<any>;
            submitError(e: any, t: any): Promise<any>;
        };
        activeAssemblies: {};
        assemblyWatchers: {};
        completedFiles: any;
        install(): void;
        uninstall(): void;
        getAssembly(e: any): any;
        getAssemblyFiles(e: any): any;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
    COMPANION: string;
    COMPANION_PATTERN: RegExp;
    COMPANION_URL: string;
    COMPANION_ALLOWED_HOSTS: RegExp;
};
declare var ls: {
    new (e: any, t: any): {
        type: string;
        id: any;
        requests: any;
        uploaders: any;
        uploaderEvents: any;
        handleResetProgress(): void;
        resetUploaderReferences(e: any, t: any): void;
        onReceiveUploadUrl(e: any, t: any): void;
        install(): void;
        uninstall(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var ae: {
    new (...args: any[]): {
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        render(e: any): void;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        install(): void;
        uninstall(): void;
        afterUpdate(): void;
    };
};
declare var is: {
    new (e: any, t: any): {
        type: string;
        files: any[];
        storage: any;
        id: any;
        title: any;
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        hostname: any;
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            fileUrl(e: any): string;
            search(e: any, t: any): Promise<any>;
            uppy: any;
            opts: any;
            onReceiveResponse(e: any): void;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            headers(e: any): Promise<any>;
            request(e: any): Promise<any>;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        install(): void;
        view: {
            nextPageQuery: any;
            search(e: any): Promise<void>;
            clearSearch(): void;
            resetPluginState(): void;
            handleScroll(e: any): Promise<void>;
            donePicking(): void;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            toggleCheckbox(e: any, t: any): void;
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Mm: {
    new (e: any): {
        scheduledAutoProceed: any;
        wasOffline: boolean;
        calculateProgress: any;
        defaultLocale: {
            strings: {
                addBulkFilesFailed: {
                    0: string;
                    1: string;
                };
                youCanOnlyUploadX: {
                    0: string;
                    1: string;
                };
                youHaveToAtLeastSelectX: {
                    0: string;
                    1: string;
                };
                aggregateExceedsSize: string;
                exceedsSize: string;
                missingRequiredMetaField: string;
                missingRequiredMetaFieldOnFile: string;
                inferiorSize: string;
                youCanOnlyUploadFileTypes: string;
                noMoreFilesAllowed: string;
                noDuplicates: string;
                companionError: string;
                authAborted: string;
                companionUnauthorizeHint: string;
                failedToUpload: string;
                noInternetConnection: string;
                connectedToInternet: string;
                noFilesFound: string;
                noSearchResults: string;
                selectX: {
                    0: string;
                    1: string;
                };
                allFilesFromFolderNamed: string;
                openFolderNamed: string;
                cancel: string;
                logOut: string;
                filter: string;
                resetFilter: string;
                loading: string;
                loadedXFiles: string;
                authenticateWithTitle: string;
                authenticateWith: string;
                signInWithGoogle: string;
                searchImages: string;
                enterTextToSearch: string;
                search: string;
                resetSearch: string;
                emptyFolderAdded: string;
                addedNumFiles: string;
                folderAlreadyAdded: string;
                folderAdded: {
                    0: string;
                    1: string;
                };
                additionalRestrictionsFailed: string;
                unnamed: string;
            };
        };
        opts: any;
        store: any;
        emit(e: any, ...args: any[]): void;
        on(e: any, t: any): any;
        once(e: any, t: any): any;
        off(e: any, t: any): any;
        updateAll(e: any): void;
        setState(e: any): void;
        getState(): any;
        patchFilesState(e: any): void;
        setFileState(e: any, t: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        locale: {
            strings: {};
            pluralize(s: any): 1 | 0;
        } | undefined;
        setOptions(e: any): void;
        resetProgress(): void;
        clearUploadedFiles(): void;
        addPreProcessor(e: any): void;
        removePreProcessor(e: any): any;
        addPostProcessor(e: any): void;
        removePostProcessor(e: any): any;
        addUploader(e: any): void;
        removeUploader(e: any): any;
        setMeta(e: any): void;
        setFileMeta(e: any, t: any): void;
        getFile(e: any): any;
        getFiles(): any[];
        getFilesByIds(e: any): any;
        getObjectOfFilesPerState(): {
            newFiles: any[];
            startedFiles: any[];
            uploadStartedFiles: any[];
            pausedFiles: any[];
            completeFiles: any[];
            erroredFiles: any[];
            inProgressFiles: any[];
            inProgressNotPausedFiles: any[];
            processingFiles: any[];
            isUploadStarted: boolean;
            isAllComplete: boolean;
            isAllErrored: boolean;
            isAllPaused: boolean;
            isUploadInProgress: boolean;
            isSomeGhost: boolean;
        };
        validateRestrictions(e: any, t: any): any;
        checkIfFileAlreadyExists(e: any): boolean;
        addFile(e: any): any;
        addFiles(e: any): void;
        removeFiles(e: any, t: any): void;
        removeFile(e: any, t: any): void;
        pauseResume(e: any): boolean | undefined;
        pauseAll(): void;
        resumeAll(): void;
        retryAll(): any;
        cancelAll(e: any): void;
        retryUpload(e: any): any;
        logout(): void;
        calculateTotalProgress(): void;
        updateOnlineStatus(): void;
        getID(): any;
        use(e: any, t: any): any;
        getPlugin(e: any): any;
        iteratePlugins(e: any): void;
        removePlugin(e: any): void;
        close(e: any): void;
        hideInfo(): void;
        info(e: any, t: any, r: any): void;
        log(e: any, t: any): void;
        registerRequestClient(e: any, t: any): void;
        getRequestClientForFile(e: any): any;
        restore(e: any): any;
        addResultData(e: any, t: any): void;
        upload(): Promise<any>;
    };
    VERSION: string;
};
declare class Ni {
    constructor(e: any, t: any);
    canHandleRootDrop: typeof o_;
}
declare var Go: {
    new (e: any, t: any): {
        mediaDevices: MediaDevices;
        supportsUserMedia: boolean;
        protocol: string;
        id: any;
        type: string;
        capturedMediaFile: {
            source: any;
            name: string;
            data: Blob;
            type: any;
        } | null;
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        defaultLocale: {
            strings: {
                pluginNameCamera: string;
                noCameraTitle: string;
                noCameraDescription: string;
                recordingStoppedMaxSize: string;
                submitRecordedFile: string;
                discardRecordedFile: string;
                smile: string;
                takePicture: string;
                startRecording: string;
                stopRecording: string;
                recordingLength: string;
                allowAccessTitle: string;
                allowAccessDescription: string;
            };
        };
        title: any;
        install(): void;
        setPluginState: any;
        render(): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        start(e: any): Promise<never> | undefined;
        stop(): Promise<void>;
        takeSnapshot(): void;
        startRecording(): void;
        stopRecording(): Promise<void>;
        discardRecordedVideo(): void;
        submit(): void;
        oneTwoThreeSmile(): Promise<any>;
        focus(): void;
        changeVideoSource(e: any): void;
        webcamActive: boolean;
        setOptions(e: any): void;
        hasCameraCheck(): Promise<boolean>;
        isAudioOnly(): boolean;
        getConstraints(e: any): {
            audio: boolean;
            video: any;
        };
        stream: MediaStream | null | undefined;
        getMediaRecorderOptions(): {
            mimeType: any;
        };
        recorder: MediaRecorder | null | undefined;
        recordingChunks: any[] | null | undefined;
        recordingLengthTimer: NodeJS.Timer | undefined;
        getVideoElement(): any;
        captureInProgress: boolean | undefined;
        getImage(): Promise<{
            source: any;
            name: string;
            data: Blob;
            type: any;
        }>;
        getVideo(): Promise<{
            source: any;
            name: string;
            data: Blob;
            type: any;
        }>;
        updateVideoSources(): void;
        uninstall(): void;
        onUnmount(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var Cl: {
    new (e: any, t: any): {
        type: string;
        id: any;
        defaultLocale: {
            strings: {
                uploadStalled: string;
            };
        };
        requests: any;
        uploaderEvents: any;
        getOptions(e: any): any;
        addMetadata(e: any, t: any, r: any): void;
        createFormDataUpload(e: any, t: any): FormData;
        createBundledUpload(e: any, t: any): FormData;
        install(): void;
        uninstall(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        update(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare var rs: {
    new (e: any, t: any): {
        type: string;
        files: any[];
        storage: any;
        id: any;
        icon: () => {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        provider: {
            provider: any;
            id: any;
            name: any;
            pluginId: any;
            tokenKey: string;
            companionKeysParams: any;
            preAuthToken: any;
            supportsRefreshToken: any;
            headers(): Promise<any>;
            onReceiveResponse(e: any): any;
            setAuthToken(e: any): Promise<any>;
            removeAuthToken(): Promise<any>;
            ensurePreAuth(): Promise<void>;
            authQuery(e: any): {};
            authUrl(e: any): string;
            loginSimpleAuth(e: any): Promise<void>;
            loginOAuth(e: any): Promise<any>;
            login(e: any): Promise<any>;
            refreshTokenUrl(): string;
            fileUrl(e: any): string;
            request(...args: any[]): Promise<any>;
            fetchPreAuthToken(): Promise<void>;
            list(e: any, t: any): Promise<any>;
            logout(e: any): Promise<any>;
            uppy: any;
            opts: any;
            setCompanionHeaders(e: any): void;
            readonly hostname: any;
            get(e: any, t: any): Promise<any>;
            post(e: any, t: any, r: any): Promise<any>;
            delete(e: any, t: any, r: any): Promise<any>;
            uploadRemoteFile(e: any, t: any, r: any): Promise<any>;
        };
        defaultLocale: {
            strings: {
                pluginNameZoom: string;
            };
        };
        title: any;
        onFirstRender(): Promise<void>;
        render(e: any): {
            type: any;
            props: any;
            key: any;
            ref: any;
            __k: null;
            __: null;
            __b: number;
            __e: null;
            __d: undefined;
            __c: null;
            __h: null;
            constructor: undefined;
            __v: any;
        };
        install(): void;
        view: {
            filterQuery(e: any): void;
            clearFilter(): void;
            getFolder(e: any, t: any): Promise<void>;
            getNextFolder(e: any): void;
            logout(): Promise<void>;
            handleAuth(e: any): Promise<void>;
            handleScroll(e: any): Promise<void>;
            donePicking(): Promise<void>;
            render(e: any, t: any): {
                type: any;
                props: any;
                key: any;
                ref: any;
                __k: null;
                __: null;
                __b: number;
                __e: null;
                __d: undefined;
                __c: null;
                __h: null;
                constructor: undefined;
                __v: any;
            };
            tearDown(): void;
            nextPagePath: any;
            isHandlingScroll: boolean;
            filterItems: (r: any) => any;
            recordShiftKeyPress: (r: any) => void;
            isShiftKeyPressed: any;
            isChecked: (r: any) => any;
            plugin: any;
            provider: any;
            opts: any;
            preFirstRender(): void;
            handleError(e: any): void;
            clearSelection(): void;
            cancelPicking(): void;
            shouldHandleScroll(e: any): boolean;
            registerRequestClient(): void;
            requestClientId: any;
            getTagFile(e: any): {
                id: any;
                source: any;
                name: any;
                type: any;
                isRemote: boolean;
                data: any;
                meta: {};
                body: {
                    fileId: any;
                };
                remote: {
                    companionUrl: any;
                    url: string;
                    body: {
                        fileId: any;
                    };
                    providerName: any;
                    provider: any;
                    requestClientId: any;
                };
            };
            toggleCheckbox(e: any, t: any): void;
            lastCheckbox: any;
            setLoading(e: any): void;
        } | undefined;
        uninstall(): void;
        getTargetPlugin(e: any): any;
        mount(e: any, t: any): any;
        isTargetDOMEl: boolean | undefined;
        el: any;
        parent: any;
        update(e: any): void;
        unmount(): void;
        onMount(): void;
        onUnmount(): void;
        uppy: any;
        opts: any;
        getPluginState(): any;
        setPluginState(e: any): void;
        setOptions(e: any): void;
        i18nInit(): void;
        i18n: any;
        i18nArray: any;
        addTarget(e: any): void;
        afterUpdate(): void;
    };
    VERSION: string;
};
declare namespace Kl {
    function debug(...args: any[]): void;
    function warn(...args: any[]): void;
    function error(...args: any[]): void;
}
declare var VM: {};
declare var bg: {};
declare namespace $M {
    export { yh as ProviderView };
}
declare function Rd(): {
    type: any;
    props: any;
    key: any;
    ref: any;
    __k: null;
    __: null;
    __b: number;
    __e: null;
    __d: undefined;
    __c: null;
    __h: null;
    constructor: undefined;
    __v: any;
};
declare function o_(i: any): boolean;
declare var yh: {};
export { Vo as Audio, el as AwsS3, no as AwsS3Multipart, Oe as BasePlugin, Xr as Box, lc as Compressor, HM as Core, jo as Dashboard, Fc as DefaultStore, zo as DragDrop, ya as DropTarget, Yr as Dropbox, Qr as Facebook, Ho as FileInput, Tl as Form, Rl as GoldenRetriever, Jr as GoogleDrive, Zr as GooglePhotos, $o as ImageEditor, Gr as Informer, es as Instagram, ts as OneDrive, qo as ProgressBar, kl as ReduxDevTools, r2 as ReduxStore, Fa as RemoteSources, Wo as ScreenCapture, Wr as StatusBar, Is as ThumbnailGenerator, tr as Transloadit, ls as Tus, ae as UIPlugin, is as Unsplash, Mm as Uppy, Ni as Url, Go as Webcam, Cl as XHRUpload, rs as Zoom, Kl as debugLogger, VM as locales, bg as server, $M as views };
